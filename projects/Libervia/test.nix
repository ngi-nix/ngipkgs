{
  sources,
  lib,
  pkgs,
  ...
}: let
  xmppUser = "alice";
  xmppHost = "example.org";
  xmppId = "${xmppUser}@${xmppHost}";
  xmppLiberviaId = "libervia@${xmppHost}";
  xmppPassword = "foobar";
  xmppMessage = "This is a test message.";
  setup-initial-libervia-users = pkgs.writeShellApplication {
    name = "setup-initial-libervia-users";
    runtimeInputs = with pkgs; [prosody];
    text = ''
      prosodyctl adduser ${xmppId} <<EOF
      ${xmppPassword}
      ${xmppPassword}
      EOF
      prosodyctl adduser ${xmppLiberviaId} <<EOF
      ${xmppPassword}
      ${xmppPassword}
      EOF
    '';
  };
in {
  name = "libervia";

  nodes = {
    server = {
      config,
      lib,
      pkgs,
      ...
    }: let
      # We need a CA-signed certificate to establish a TLS connection with prosody
      # And the CA certificate needs to be allowed globally
      csr-conf = ./example.org.cnf; # Example config generated by prosody
      certs =
        pkgs.runCommand "example-certs"
        {buildInputs = [pkgs.openssl];}
        ''
          mkdir $out

          # generate CA keypair
          openssl req -new -x509 -nodes \
            -extensions v3_ca -days 365 \
            -subj "/O=Libervia CA/CN=Libervia CA" \
            -keyout $out/ca.key -out $out/ca.crt

          # generate server key/signing request
          openssl genrsa -out $out/server.key 3072
          openssl req -new -utf8 -sha256 \
            -key $out/server.key \
            -config ${csr-conf} \
            -out server.csr

          # sign the request/generate the certificate
          openssl req -new -x509 -nodes -utf8 \
            -CA $out/ca.crt -CAkey $out/ca.key \
            -key $out/server.key \
            -days 500 -sha256 \
            -config ${csr-conf} \
            -out $out/server.crt

          echo $out
        '';
    in {
      imports = [
        sources.modules.default
        sources.modules."programs.libervia"
        sources.examples."Libervia/base"
        # can't test Libervia/unfree, enabling unfree derivations breaks nixosTests eval
      ];

      # Need an actual logged-in user to test with
      users.users.alice = {
        description = "Alice Foobar";
        password = "foobar";
        isNormalUser = true;
        extraGroups = ["wheel"];
        uid = 1000;
      };

      # Need a graphical session because we need to launch multiple programs in a valid D-Bus session
      services.xserver = {
        enable = true;
        displayManager.lightdm.enable = true;
        windowManager.icewm.enable = true;
      };

      # Automatic log-in
      services.displayManager = {
        defaultSession = "none+icewm";
        autoLogin = {
          enable = true;
          user = "alice";
        };
      };

      # Local XMPP server to test against
      services.prosody = {
        enable = true;
        admins = ["root@example.org"];
        ssl.cert = "${certs}/server.crt";
        ssl.key = "${certs}/server.key";
        virtualHosts."example.org" = {
          enabled = true;
          domain = "example.org";
          ssl.cert = "${certs}/server.crt";
          ssl.key = "${certs}/server.key";
        };
        muc = [
          {
            domain = "conference.example.org";
          }
        ];
        uploadHttp = {
          domain = "upload.example.org";
        };
      };

      # Have example.org point to the local XMPP server
      networking.hosts."127.0.0.1" = [
        "example.org"
      ];

      # Make the self-signed certificates work
      security.pki.certificateFiles = [
        "${certs}/ca.crt"
      ];

      environment = {
        etc = {
          # Setup some defaults to better point it at local prosody
          # This is *not* regular INI format afaict, can't use generator
          "libervia.conf".text = ''
            [DEFAULT]
            xmpp_domain = example.org
            hosts_dict = {
                "example.org": {"host": "127.0.0.1"}
                }

            [web]
            passphrase = ${xmppPassword}
          '';

          # Input for message sending command
          "xmppMessage".text = xmppMessage;
        };

        # Small script to register our test user in prosody
        systemPackages = [
          setup-initial-libervia-users
          pkgs.firefox
        ];
      };
    };
  };

  # Need to see when terminals have launched
  enableOCR = true;

  testScript = {nodes, ...}: ''
    # Need a terminal to run stuff, need D-Bus session
    def spawn_terminal():
        machine.send_key("ctrl-alt-t")
        # Can't reliably OCR for this at default size. sleep, adjust & check later
        machine.sleep(10)
        machine.send_key("alt-f10")
        # Increase font size to help with OCR
        machine.send_key("shift-kp_add")
        machine.send_key("shift-kp_add")
        machine.send_key("shift-kp_add")
        machine.send_key("shift-kp_add")
        # Now check if we can see it
        machine.wait_for_text("alice")

    start_all()

    machine.wait_for_x()
    machine.wait_for_file("/home/alice/.Xauthority")

    # Setup prosody so we can connect
    machine.wait_for_console_text("Started Prosody XMPP server")
    machine.succeed("sudo -su prosody ${lib.getExe setup-initial-libervia-users}")

    # We use in-session terminals for running commands, but relying on OCR to view results is slow
    # Create some output files for commands to pipe outputs into
    # And start listeners that throw the data into the console for quicker results
    machine.succeed("sudo -su alice touch /home/alice/backend.log")
    machine.succeed("sudo -su alice tail -f /home/alice/backend.log >&2 &")
    machine.succeed("sudo -su alice touch /home/alice/frontend.log")
    machine.succeed("sudo -su alice tail -f /home/alice/frontend.log >&2 &")

    # Start libervia backend in foreground, so we can read logs
    spawn_terminal()
    machine.send_chars("libervia-backend fg | tee -a ~/backend.log\n")
    machine.wait_for_console_text("Backend is ready")

    # Next workspace
    machine.send_key("ctrl-alt-right")
    machine.sleep(2) # Make sure we're actually on the second workspace

    # Register profile with setup XMPP account in Libervia
    spawn_terminal()
    machine.send_chars("libervia-cli profile create -j ${xmppId} -x ${xmppPassword} alice | tee -a ~/frontend.log\n")
    machine.wait_for_console_text(r"\[${xmppUser}\] Profile session started")

    # Log in
    machine.send_chars("libervia-cli profile connect -p alice -c | tee -a ~/frontend.log\n")
    machine.wait_for_console_text("Data consistency ensured/restored.")

    # Send something
    machine.send_chars("libervia-cli message send ${xmppId} </etc/xmppMessage | tee -a ~/frontend.log\n")
    machine.wait_for_console_text("${xmppUser} has 1 items")

    # Check if we can query the message
    machine.send_chars("libervia-cli message mam | tee -a ~/frontend.log\n")
    machine.wait_for_console_text("${xmppUser}> ${xmppMessage}") # first log, us sending the message to ourself
    machine.wait_for_console_text("${xmppUser}> ${xmppMessage}") # second log, us receicing the message from ourself

    # Register web profile with setup XMPP account in Libervia
    machine.send_chars("libervia-cli profile create -j ${xmppLiberviaId} -p ${xmppPassword} libervia | tee -a ~/frontend.log\n")
    machine.wait_for_console_text(r"\[libervia\] Profile session started")
  '';
}
